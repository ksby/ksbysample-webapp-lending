version: '3'

services:
  prometheus:
    image: prom/prometheus:v2.15.1
    container_name: prometheus
    ports:
      - "9090:9090"
    # TZ=Asia/Tokyo を設定してみたが日本時間に変わらなかったのでコメントアウトしておく
    # environment:
    #   - TZ=Asia/Tokyo
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./docker/prometheus/storage:/prometheus
    extra_hosts:
      - "app:${HOST_IP_ADDRESS}"

  grafana:
    image: grafana/grafana:6.5.2
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - TZ=Asia/Tokyo
    volumes:
      - ./docker/grafana/storage:/var/lib/grafana

  # 起動したコンテナに /bin/sh でアクセスする場合には以下のコマンドを実行する
  # docker exec -it redis /bin/sh
  #
  # 起動したコンテナの redis に redis-cli でアクセスするには以下のコマンドを実行する
  # docker exec -it redis redis-cli
  #
  #############################################################################
  # 単体 Redis サーバ
  # redis:
  #   image: redis:${REDIS_VERSION}
  #   container_name: redis
  #   ports:
  #   - "6379:6379"
  #
  #############################################################################
  # Redis Cluster
  redis-cluster-1:
    image: redis:${REDIS_VERSION}-alpine
    container_name: redis-cluster-${REDIS_CLUSTER_1_PORT}
    ports:
      - "${REDIS_CLUSTER_1_PORT}:6379"
      - "1${REDIS_CLUSTER_1_PORT}:16379"
    environment:
      - TZ=Asia/Tokyo
    volumes:
      - ./docker/redis/redis.conf:/etc/redis/redis.conf
    command:
      - /bin/sh
      - -c
      - |
        redis-server /etc/redis/redis.conf \
                    --cluster-announce-ip ${HOST_IP_ADDRESS} \
                    --cluster-announce-port ${REDIS_CLUSTER_1_PORT} \
                    --cluster-announce-bus-port 1${REDIS_CLUSTER_1_PORT}
  redis-cluster-2:
    image: redis:${REDIS_VERSION}-alpine
    container_name: redis-cluster-${REDIS_CLUSTER_2_PORT}
    ports:
      - "${REDIS_CLUSTER_2_PORT}:6379"
      - "1${REDIS_CLUSTER_2_PORT}:16379"
    environment:
      - TZ=Asia/Tokyo
    volumes:
      - ./docker/redis/redis.conf:/etc/redis/redis.conf
    command:
      - /bin/sh
      - -c
      - |
        redis-server /etc/redis/redis.conf \
                    --cluster-announce-ip ${HOST_IP_ADDRESS} \
                    --cluster-announce-port ${REDIS_CLUSTER_2_PORT} \
                    --cluster-announce-bus-port 1${REDIS_CLUSTER_2_PORT}
    depends_on:
      - redis-cluster-1
  redis-cluster-3:
    image: redis:${REDIS_VERSION}-alpine
    container_name: redis-cluster-${REDIS_CLUSTER_3_PORT}
    ports:
      - "${REDIS_CLUSTER_3_PORT}:6379"
      - "1${REDIS_CLUSTER_3_PORT}:16379"
    environment:
      - TZ=Asia/Tokyo
    volumes:
      - ./docker/redis/redis.conf:/etc/redis/redis.conf
    command:
      - /bin/sh
      - -c
      - |
        redis-server /etc/redis/redis.conf \
                    --cluster-announce-ip ${HOST_IP_ADDRESS} \
                    --cluster-announce-port ${REDIS_CLUSTER_3_PORT} \
                    --cluster-announce-bus-port 1${REDIS_CLUSTER_3_PORT}
    depends_on:
      - redis-cluster-1
  redis-cluster-4:
    image: redis:${REDIS_VERSION}-alpine
    container_name: redis-cluster-${REDIS_CLUSTER_4_PORT}
    ports:
      - "${REDIS_CLUSTER_4_PORT}:6379"
      - "1${REDIS_CLUSTER_4_PORT}:16379"
    environment:
      - TZ=Asia/Tokyo
    volumes:
      - ./docker/redis/redis.conf:/etc/redis/redis.conf
    command:
      - /bin/sh
      - -c
      - |
        redis-server /etc/redis/redis.conf \
                    --cluster-announce-ip ${HOST_IP_ADDRESS} \
                    --cluster-announce-port ${REDIS_CLUSTER_4_PORT} \
                    --cluster-announce-bus-port 1${REDIS_CLUSTER_4_PORT}
    depends_on:
      - redis-cluster-1
  redis-cluster-5:
    image: redis:${REDIS_VERSION}-alpine
    container_name: redis-cluster-${REDIS_CLUSTER_5_PORT}
    ports:
      - "${REDIS_CLUSTER_5_PORT}:6379"
      - "1${REDIS_CLUSTER_5_PORT}:16379"
    environment:
      - TZ=Asia/Tokyo
    volumes:
      - ./docker/redis/redis.conf:/etc/redis/redis.conf
    command:
      - /bin/sh
      - -c
      - |
        redis-server /etc/redis/redis.conf \
                    --cluster-announce-ip ${HOST_IP_ADDRESS} \
                    --cluster-announce-port ${REDIS_CLUSTER_5_PORT} \
                    --cluster-announce-bus-port 1${REDIS_CLUSTER_5_PORT}
    depends_on:
      - redis-cluster-1
  redis-cluster-6:
    image: redis:${REDIS_VERSION}-alpine
    container_name: redis-cluster-${REDIS_CLUSTER_6_PORT}
    ports:
      - "${REDIS_CLUSTER_6_PORT}:6379"
      - "1${REDIS_CLUSTER_6_PORT}:16379"
    environment:
      - TZ=Asia/Tokyo
    volumes:
      - ./docker/redis/redis.conf:/etc/redis/redis.conf
    command:
      - /bin/sh
      - -c
      - |
        redis-server /etc/redis/redis.conf \
                    --cluster-announce-ip ${HOST_IP_ADDRESS} \
                    --cluster-announce-port ${REDIS_CLUSTER_6_PORT} \
                    --cluster-announce-bus-port 1${REDIS_CLUSTER_6_PORT}
    depends_on:
      - redis-cluster-1
  redis-cluster-make:
    build:
      context: ./docker/redis
      args:
        - REDIS_VERSION=${REDIS_VERSION}
    image: redis:${REDIS_VERSION}-custom
    container_name: redis-cluster-make
    environment:
      - TZ=Asia/Tokyo
    command:
      - /bin/sh
      - -c
      - |
        expect -c "
        spawn redis-cli --cluster create \
                          ${HOST_IP_ADDRESS}:${REDIS_CLUSTER_1_PORT} \
                          ${HOST_IP_ADDRESS}:${REDIS_CLUSTER_2_PORT} \
                          ${HOST_IP_ADDRESS}:${REDIS_CLUSTER_3_PORT} \
                          ${HOST_IP_ADDRESS}:${REDIS_CLUSTER_4_PORT} \
                          ${HOST_IP_ADDRESS}:${REDIS_CLUSTER_5_PORT} \
                          ${HOST_IP_ADDRESS}:${REDIS_CLUSTER_6_PORT} \
                        --cluster-replicas 1
        expect \"Can I set the above configuration? (type 'yes' to accept): \"
        send \"yes\n\"
        expect eof
        "
    depends_on:
      - redis-cluster-1
      - redis-cluster-2
      - redis-cluster-3
      - redis-cluster-4
      - redis-cluster-5
      - redis-cluster-6

  redis_exporter:
    image: oliver006/redis_exporter:v1.14.0-alpine
    container_name: redis_exporter
    ports:
      - "9121:9121"
    # environment:
      # TZ=Asia/Tokyo を設定してみたが日本時間に変わらなかったのでコメントアウトしておく
      # - TZ=Asia/Tokyo

  # 管理コンソールは以下のURLにアクセスする
  # http://localhost:15672/
  #
  # 起動したコンテナに /bin/sh でアクセスする場合には以下のコマンドを実行する
  # docker exec -it rabbitmq /bin/sh
  #
  # 起動したコンテナの rabbitmq に rabbitmqctl で接続して管理コマンドを実行するには以下のコマンドを実行する
  # docker exec -it rabbitmq rabbitmqctl ...
  #############################################################################
  # 単体 Redis サーバ
  # rabbitmq:
  #   image: rabbitmq:${RABBITMQ_VERSION}-alpine
  #   container_name: rabbitmq
  #   hostname: rabbitmq
  #   ports:
  #   - "5672:5672"
  #   - "15672:15672"
  #   environment:
  #   - RABBITMQ_DEFAULT_USER=rabbitmq
  #   - RABBITMQ_DEFAULT_PASS=12345678
  #
  #############################################################################
  # RabbitMQ Clustering
  rabbitmq1:
    build:
      context: ./docker/rabbitmq
      args:
        - RABBITMQ_VERSION=${RABBITMQ_VERSION}
    image: rabbitmq:${RABBITMQ_VERSION}-alpine-custom
    container_name: rabbitmq1
    hostname: rabbitmq1
    environment:
      - TZ=Asia/Tokyo
      - RABBITMQ_ERLANG_COOKIE
      - RABBITMQ_DEFAULT_USER
      - RABBITMQ_DEFAULT_PASS
      - RABBITMQ_DEFAULT_VHOST
  rabbitmq2:
    image: rabbitmq:${RABBITMQ_VERSION}-alpine-custom
    container_name: rabbitmq2
    hostname: rabbitmq2
    environment:
      - TZ=Asia/Tokyo
      - RABBITMQ_ERLANG_COOKIE
    volumes:
      - ./docker/rabbitmq/cluster-entrypoint.sh:/usr/local/bin/cluster-entrypoint.sh
    entrypoint: /bin/sh -c /usr/local/bin/cluster-entrypoint.sh
    depends_on:
      - rabbitmq1
  rabbitmq3:
    image: rabbitmq:${RABBITMQ_VERSION}-alpine-custom
    container_name: rabbitmq3
    hostname: rabbitmq3
    environment:
      - TZ=Asia/Tokyo
      - RABBITMQ_ERLANG_COOKIE
    volumes:
      - ./docker/rabbitmq/cluster-entrypoint.sh:/usr/local/bin/cluster-entrypoint.sh
    entrypoint: /usr/local/bin/cluster-entrypoint.sh
    depends_on:
      - rabbitmq1
  # http://localhost:1936/haproxy?stats
  haproxy:
    image: haproxy:2.1.2-alpine
    container_name: haproxy
    ports:
      - "1936:1936"
      - "5672:5672"
      - "15672:15672"
    environment:
      - TZ=Asia/Tokyo
    volumes:
      - ./docker/rabbitmq/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    depends_on:
      - rabbitmq1
      - rabbitmq2
      - rabbitmq3
  haproxy-rsyslog:
    image: rafpe/docker-haproxy-rsyslog:latest
    container_name: haproxy-rsyslog
    environment:
      - TZ=Asia/Tokyo
    volumes:
      - ./docker/rabbitmq/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    depends_on:
      - haproxy

  rabbitmq_exporter:
    image: kbudde/rabbitmq-exporter:latest
    container_name: rabbitmq_exporter
    ports:
      - "9419:9419"
    environment:
      # TZ=Asia/Tokyo を設定してみたが日本時間に変わらなかったのでコメントアウトしておく
      # - TZ=Asia/Tokyo
      - RABBIT_URL=http://haproxy:15672
      - RABBIT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBIT_PASSWORD=${RABBITMQ_DEFAULT_PASS}
      - RABBIT_CAPABILITIES=bert,no_sort
      - PUBLISH_PORT=9419

  # 起動したコンテナに /bin/sh でアクセスする場合には以下のコマンドを実行する
  # docker exec -it postgresql /bin/sh
  #
  # psql を使用したい場合には以下のコマンドを実行する
  # docker exec -it postgresql psql -U postgres
  postgresql:
    image: postgres:${POSTGRESQL_VERSION}-alpine
    container_name: postgresql
    ports:
      - "5432:5432"
    environment:
      - TZ=Asia/Tokyo
      - LANG=ja_JP.UTF-8
      - POSTGRES_PASSWORD=xxxxxxxx
    volumes:
      - ./src/main/resources/db/init/create_database.sql:/docker-entrypoint-initdb.d/create_database.sql

  # URL
  # http://localhost:12000/
  pgadmin4:
    image: dpage/pgadmin4:${PGADMIN4_VERSION}
    container_name: pgadmin4
    ports:
      - "12000:80"
    environment:
      # TZ=Asia/Tokyo を設定してみたが日本時間に変わらなかったのでコメントアウトしておく
      # - TZ=Asia/Tokyo
      # PGADMIN_DEFAULT_EMAIL には接続する PostgreSQL の ユーザ名を設定する（サーバを追加する時楽なため）
      - PGADMIN_DEFAULT_EMAIL=postgres@example.com
      - PGADMIN_DEFAULT_PASSWORD=yyyyyyyy
      # PGADMIN_CONFIG_CONSOLE_LOG_LEVEL は debug 用
      # 設定値は https://www.pgadmin.org/docs/pgadmin4/development/config_py.html の CONSOLE_LOG_LEVEL 参照
      - PGADMIN_CONFIG_CONSOLE_LOG_LEVEL=10
    volumes:
      - ./docker/pgadmin4/data:/var/lib/pgadmin

  flyway:
    image: flyway/flyway:${FLYWAY_VERSION}-alpine
    container_name: flyway
    environment:
      - TZ=Asia/Tokyo
    volumes:
      - ./src/main/resources/db/migration:/flyway/sql
    command: -url=${FLYWAY_URL} -user=${FLYWAY_USER} -password=${FLYWAY_PASSWORD} -connectRetries=60 migrate
    depends_on:
      - postgresql
    # 下の３行は debug 用
    # うまく動かない時はコメントアウトを解除した後、
    # docker exec -it flyway /bin/sh
    # で接続してから
    # flyway <command に記述した文字列>
    # を実行してみる
    #
    # entrypoint: /bin/sh
    # stdin_open: true
    # tty: true

  postgres_exporter:
    image: wrouesnel/postgres_exporter:v0.8.0
    container_name: postgres_exporter
    environment:
      # TZ=Asia/Tokyo を設定してみたが日本時間に変わらなかったのでコメントアウトしておく
      # - TZ=Asia/Tokyo
      - DATA_SOURCE_NAME=postgresql://${POSTGRES_EXPORTER_USER}:${POSTGRES_EXPORTER_PASSWORD}@postgresql:5432/ksbylending?sslmode=disable
    depends_on:
      - postgresql
